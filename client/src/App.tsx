import {useDojo} from './DojoContext';import {useComponentValue} from "@dojoengine/react";import {Direction,} from './dojo/createSystemCalls'import {EntityIndex, setComponent} from '@latticexyz/recs';import {useEffect, useState} from 'react';import {getFirstComponentByType} from './utils';import {Moves, Position} from './generated/graphql';import {Simulate} from "react-dom/test-utils";import durationChange = Simulate.durationChange;function App() {    const {        setup: {            systemCalls: {spawn, move},            components: {Moves, Position},            network: {graphSdk, call}        },        account: {create, list, select, account, isDeploying}    } = useDojo();    // entity id - this example uses the account address as the entity id    const entityId = account.address;    // get current component values    const position = useComponentValue(Position, parseInt(entityId.toString()) as EntityIndex);    const moves = useComponentValue(Moves, parseInt(entityId.toString()) as EntityIndex);    useEffect(() => {        if (!entityId) return;        const fetchData = async () => {            const {data} = await graphSdk.getEntities();            if (data) {                const remaining = getFirstComponentByType(data.entities?.edges, 'Moves') as Moves;                const position = getFirstComponentByType(data.entities?.edges, 'Position') as Position;                setComponent(Moves, parseInt(entityId.toString()) as EntityIndex, {remaining: remaining.remaining})                setComponent(Position, parseInt(entityId.toString()) as EntityIndex, {x: position.x, y: position.y})            }        }        fetchData();    }, [account.address]);    const mapData = [        [            "X",            "X",            "X",            "X",            "X",            "X",            "X",            "X",            "X",            "X",            "X",            "X",            "X",            "X",            "X",            "X",            "X",            "X",            "X",            "X",            "X",            "X"        ],        [            "X",            "X",            "X",            " ",            " ",            " ",            " ",            " ",            "X",            "X",            "X",            "X",            "X",            "X",            "X",            "X",            "X",            "X",            "X",            "X",            "X",            "X"        ],        [            "X",            "X",            "X",            " ",            " ",            " ",            " ",            " ",            "X",            "X",            "X",            "X",            "X",            "X",            "X",            "X",            "X",            "X",            "X",            "X",            "X",            "X"        ],        [            "X",            "X",            "X",            "X",            " ",            " ",            "X",            "X",            "X",            "X",            "X",            "X",            "X",            "X",            "X",            "X",            "X",            "X",            "X",            "X",            "X",            "X"        ],        [            "X",            "X",            "X",            "X",            " ",            " ",            "X",            "X",            "X",            "X",            "X",            "X",            "X",            "X",            "X",            "X",            "X",            "X",            "X",            "X",            "X",            "X"        ],        [            "X",            "X",            "X",            " ",            " ",            " ",            "X",            "X",            "X",            "X",            "X",            "X",            "X",            "X",            "X",            "X",            "X",            "X",            "X",            "X",            "X",            "X"        ],        [            "X",            "X",            "X",            " ",            " ",            "X",            "X",            "X",            "X",            "X",            "X",            "X",            "X",            "X",            "X",            "X",            "X",            "X",            "X",            "X",            "X",            "X"        ],        [            "X",            "X",            " ",            " ",            " ",            " ",            " ",            "X",            "X",            " ",            " ",            " ",            " ",            " ",            " ",            "X",            "X",            "X",            "X",            "X",            "X",            "X"        ],        [            "X",            "X",            " ",            " ",            " ",            " ",            " ",            "X",            "X",            " ",            " ",            " ",            " ",            " ",            " ",            "X",            "X",            "X",            "X",            "X",            "X",            "X"        ],        [            "X",            " ",            " ",            " ",            " ",            " ",            " ",            "X",            "X",            " ",            " ",            " ",            " ",            " ",            " ",            " ",            " ",            " ",            "X",            "X",            "X",            "X"        ],        [            "X",            " ",            " ",            " ",            " ",            " ",            " ",            "X",            "X",            " ",            " ",            " ",            " ",            " ",            " ",            "X",            "X",            " ",            "X",            "X",            "X",            "X"        ],        [            "X",            " ",            " ",            " ",            " ",            " ",            " ",            " ",            "X",            "X",            "X",            "X",            " ",            "X",            "X",            "X",            "X",            " ",            "X",            "X",            "X",            "X"        ],        [            "X",            " ",            " ",            " ",            " ",            " ",            " ",            " ",            "X",            "X",            "X",            "X",            " ",            "X",            "X",            "X",            "X",            " ",            "X",            "X",            "X",            "X"        ],        [            "X",            " ",            " ",            " ",            " ",            " ",            " ",            " ",            "X",            "X",            "X",            "X",            " ",            "X",            "X",            "X",            "X",            " ",            "X",            "X",            "X",            "X"        ],        [            "X",            " ",            " ",            " ",            " ",            " ",            " ",            " ",            "X",            "X",            "X",            "X",            " ",            "X",            "X",            "X",            "X",            " ",            "X",            "X",            "X",            "X"        ],        [            "X",            "X",            "X",            "X",            "X",            "X",            " ",            " ",            "X",            "X",            "X",            "X",            " ",            "X",            "X",            "X",            " ",            " ",            "X",            "X",            "X",            "X"        ],        [            "X",            "X",            "X",            "X",            "X",            "X",            "X",            " ",            " ",            " ",            " ",            " ",            " ",            " ",            " ",            " ",            " ",            " ",            "X",            "X",            "X",            "X"        ],        [            "X",            "X",            "X",            "X",            "X",            "X",            " ",            " ",            "X",            "X",            "X",            "X",            " ",            "X",            "X",            "X",            "X",            "X",            "X",            "X",            "X",            "X"        ],        [            "X",            "X",            "X",            "X",            "X",            "X",            " ",            " ",            " ",            " ",            " ",            " ",            "X",            "X",            "X",            "X",            "X",            "X",            "X",            "X",            "X",            "X"        ],        [            "X",            "X",            "X",            "X",            "X",            "X",            "X",            "X",            "X",            "X",            "X",            "X",            "X",            "X",            "X",            "X",            "X",            "X",            "X",            "X",            "X",            "X"        ],        [            "X",            "X",            "X",            "X",            "X",            "X",            "X",            "X",            "X",            "X",            "X",            "X",            "X",            "X",            "X",            "X",            "X",            "X",            "X",            "X",            "X",            "X"        ],        [            "X",            "X",            "X",            "X",            "X",            "X",            "X",            "X",            "X",            "X",            "X",            "X",            "X",            "X",            "X",            "X",            "X",            "X",            "X",            "X",            "X",            "X"        ]    ]    // const [pos, setPos] = useState({x: 4, y: 1});    const render = () => {        let rowString = ""        if (!position) {            return rowString;        }        let dungeon = JSON.parse(JSON.stringify(mapData));        console.log("x,y", position.x, position.y)        if (dungeon[0].length < position.x || dungeon.length < position.y) {            console.log("a")            return rowString;        }        dungeon[position.y][position.x] = "<span style='letter-spacing: -9px'>💀</span>";        for (let y = 0; y < dungeon.length; y++) {            for (let x = 0; x < dungeon.length; x++) {                const tile = dungeon[y][x]                rowString += `${tile} `            }            rowString += '\n'        }        return (rowString)    };    const [map, setMap] = useState(render());    const isCollision = (x: any, y: any) => {        return mapData[y][x] != " ";    }    useEffect(() => {        async function handleKeyDown(event: any) {            console.log("handle KeyDown:", event.key)            if (event.key === 'w') {                await cc_move(account, Direction.Up)            }            if (event.key === 's') {                await cc_move(account, Direction.Down)            }            if (event.key === 'a') {                await cc_move(account, Direction.Left)            }            if (event.key === 'd') {                await cc_move(account, Direction.Right)            }        }        window.addEventListener('keydown', handleKeyDown);        return () => {            window.removeEventListener('keydown', handleKeyDown);        };    }, [position]);    const cc_move = async (account: any, direction: any) => {        if (direction == Direction.Up) {            if (isCollision(position.x, position.y - 1)) {                console.log("is collision")                return            }        }        if (direction == Direction.Down) {            if (isCollision(position.x, position.y + 1)) {                console.log("is collision")                return            }        }        if (direction == Direction.Left) {            if (isCollision(position.x - 1, position.y)) {                console.log("is collision")                return            }        }        if (direction == Direction.Right) {            if (isCollision(position.x + 1, position.y)) {                console.log("is collision")                return            }        }        await move(account, direction)    }    return (        <div style={{"width": "900px"}}>            <button onClick={create}>{isDeploying ? "deploying burner" : "create burner"}</button>            <div className="card">                select signer:{" "}                <select onChange={e => select(e.target.value)}>                    {list().map((account, index) => {                        return <option value={account.address} key={index}>{account.address}</option>                    })}                </select>            </div>            <div className="card">                <button onClick={() => spawn(account)}>Spawn</button>                <div>Moves Left: {moves ? `${moves['remaining']}` : 'Need to Spawn'}</div>                <div>Position: {position ? `${position['x']}, ${position['y']}` : 'Need to Spawn'}</div>            </div>            <div className="card">        <pre className="MapPre" dangerouslySetInnerHTML={{__html: render()}}>        </pre>            </div>            <div className="card" style={{"float": "right"}}>                <button onClick={() => cc_move(account, Direction.Up)}>Move Up</button>                <br/>                <button onClick={() => cc_move(account, Direction.Left)}>Move Left</button>                <button onClick={() => cc_move(account, Direction.Right)}>Move Right</button>                <br/>                <button onClick={() => cc_move(account, Direction.Down)}>Move Down</button>            </div>        </div>    );}export default App;