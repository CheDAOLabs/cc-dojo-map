{"version":3,"file":"LosslessNumber.js","names":["extractSignificantDigits","getUnsafeNumberReason","isInteger","isNumber","UnsafeNumberReason","LosslessNumber","value","_classCallCheck","_defineProperty","Error","_createClass","key","valueOf","unsafeReason","undefined","truncate_float","parseFloat","BigInt","concat","toString","isLosslessNumber","_typeof","toLosslessNumber","length","isNaN","isFinite","String"],"sources":["../../src/LosslessNumber.ts"],"sourcesContent":["import {\n  extractSignificantDigits,\n  getUnsafeNumberReason,\n  isInteger,\n  isNumber,\n  UnsafeNumberReason\n} from './utils.js'\n\n/**\n * A lossless number. Stores its numeric value as string\n */\nexport class LosslessNumber {\n  // numeric value as string\n  value: string\n\n  // type information\n  isLosslessNumber = true\n\n  constructor(value: string) {\n    if (!isNumber(value)) {\n      throw new Error('Invalid number (value: \"' + value + '\")')\n    }\n\n    this.value = value\n  }\n\n  /**\n   * Get the value of the LosslessNumber as number or bigint.\n   *\n   * - a number is returned for safe numbers and decimal values that only lose some insignificant digits\n   * - a bigint is returned for big integer numbers\n   * - an Error is thrown for values that will overflow or underflow\n   *\n   * Note that you can implement your own strategy for conversion by just getting the value as string\n   * via .toString(), and using util functions like isInteger, isSafeNumber, getUnsafeNumberReason,\n   * and toSafeNumberOrThrow to convert it to a numeric value.\n   */\n  valueOf(): number | bigint {\n    const unsafeReason = getUnsafeNumberReason(this.value)\n\n    // safe or truncate_float\n    if (unsafeReason === undefined || unsafeReason === UnsafeNumberReason.truncate_float) {\n      return parseFloat(this.value)\n    }\n\n    // truncate_integer\n    if (isInteger(this.value)) {\n      return BigInt(this.value)\n    }\n\n    // overflow or underflow\n    throw new Error(\n      'Cannot safely convert to number: ' +\n        `the value '${this.value}' would ${unsafeReason} and become ${parseFloat(this.value)}`\n    )\n  }\n\n  /**\n   * Get the value of the LosslessNumber as string.\n   */\n  toString(): string {\n    return this.value\n  }\n\n  // Note: we do NOT implement a .toJSON() method, and you should not implement\n  // or use that, it cannot safely turn the numeric value in the string into\n  // stringified JSON since it has to be parsed into a number first.\n}\n\n/**\n * Test whether a value is a LosslessNumber\n */\nexport function isLosslessNumber(value: unknown): value is LosslessNumber {\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  return (value && typeof value === 'object' && value.isLosslessNumber === true) || false\n}\n\n/**\n * Convert a number into a LosslessNumber if this is possible in a safe way\n * If the value has too many digits, or is NaN or Infinity, an error will be thrown\n */\nexport function toLosslessNumber(value: number): LosslessNumber {\n  if (extractSignificantDigits(value + '').length > 15) {\n    throw new Error(\n      'Invalid number: contains more than 15 digits and is most likely truncated and unsafe by itself ' +\n        `(value: ${value})`\n    )\n  }\n\n  if (isNaN(value)) {\n    throw new Error('Invalid number: NaN')\n  }\n\n  if (!isFinite(value)) {\n    throw new Error('Invalid number: ' + value)\n  }\n\n  return new LosslessNumber(String(value))\n}\n"],"mappings":";;;;;;;AAAA,SACEA,wBAAwB,EACxBC,qBAAqB,EACrBC,SAAS,EACTC,QAAQ,EACRC,kBAAkB,QACb,YAAY;;AAEnB;AACA;AACA;AACA,WAAaC,cAAc;EAOzB,SAAAA,eAAYC,KAAa,EAAE;IAAAC,eAAA,OAAAF,cAAA;IAN3B;IAGA;IAAAG,eAAA,2BACmB,IAAI;IAGrB,IAAI,CAACL,QAAQ,CAACG,KAAK,CAAC,EAAE;MACpB,MAAM,IAAIG,KAAK,CAAC,0BAA0B,GAAGH,KAAK,GAAG,IAAI,CAAC;IAC5D;IAEA,IAAI,CAACA,KAAK,GAAGA,KAAK;EACpB;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAVEI,YAAA,CAAAL,cAAA;IAAAM,GAAA;IAAAL,KAAA,EAWA,SAAAM,QAAA,EAA2B;MACzB,IAAMC,YAAY,GAAGZ,qBAAqB,CAAC,IAAI,CAACK,KAAK,CAAC;;MAEtD;MACA,IAAIO,YAAY,KAAKC,SAAS,IAAID,YAAY,KAAKT,kBAAkB,CAACW,cAAc,EAAE;QACpF,OAAOC,UAAU,CAAC,IAAI,CAACV,KAAK,CAAC;MAC/B;;MAEA;MACA,IAAIJ,SAAS,CAAC,IAAI,CAACI,KAAK,CAAC,EAAE;QACzB,OAAOW,MAAM,CAAC,IAAI,CAACX,KAAK,CAAC;MAC3B;;MAEA;MACA,MAAM,IAAIG,KAAK,CACb,mCAAmC,iBAAAS,MAAA,CACnB,IAAI,CAACZ,KAAK,cAAAY,MAAA,CAAWL,YAAY,kBAAAK,MAAA,CAAeF,UAAU,CAAC,IAAI,CAACV,KAAK,CAAC,CACxF,CAAC;IACH;;IAEA;AACF;AACA;EAFE;IAAAK,GAAA;IAAAL,KAAA,EAGA,SAAAa,SAAA,EAAmB;MACjB,OAAO,IAAI,CAACb,KAAK;IACnB;;IAEA;IACA;IACA;EAAA;EAAA,OAAAD,cAAA;AAAA;;AAGF;AACA;AACA;AACA,OAAO,SAASe,gBAAgBA,CAACd,KAAc,EAA2B;EACxE;EACA;EACA,OAAQA,KAAK,IAAIe,OAAA,CAAOf,KAAK,MAAK,QAAQ,IAAIA,KAAK,CAACc,gBAAgB,KAAK,IAAI,IAAK,KAAK;AACzF;;AAEA;AACA;AACA;AACA;AACA,OAAO,SAASE,gBAAgBA,CAAChB,KAAa,EAAkB;EAC9D,IAAIN,wBAAwB,CAACM,KAAK,GAAG,EAAE,CAAC,CAACiB,MAAM,GAAG,EAAE,EAAE;IACpD,MAAM,IAAId,KAAK,CACb,iGAAiG,cAAAS,MAAA,CACpFZ,KAAK,MACpB,CAAC;EACH;EAEA,IAAIkB,KAAK,CAAClB,KAAK,CAAC,EAAE;IAChB,MAAM,IAAIG,KAAK,CAAC,qBAAqB,CAAC;EACxC;EAEA,IAAI,CAACgB,QAAQ,CAACnB,KAAK,CAAC,EAAE;IACpB,MAAM,IAAIG,KAAK,CAAC,kBAAkB,GAAGH,KAAK,CAAC;EAC7C;EAEA,OAAO,IAAID,cAAc,CAACqB,MAAM,CAACpB,KAAK,CAAC,CAAC;AAC1C"}