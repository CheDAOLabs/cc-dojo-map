import { Abi } from 'starknet';
import { BlockNumber } from 'starknet';
/** Contract Read options. */
export interface UseContractReadOptions {
    /** Refresh data at every block. */
    watch?: boolean;
    /** Block identifier used when performing call. */
    blockIdentifier?: BlockNumber;
}
/** Arguments for `useContractRead`. */
export interface UseContractReadArgs<T extends unknown[]> {
    /** The target contract's ABI. */
    abi: Abi;
    /** The target contract's address. */
    address: string;
    /** The contract's function name. */
    functionName: string;
    /** Read arguments. */
    args?: T;
}
/** Value returned from `useContractRead`. */
export interface UseContractReadResult {
    /** Value returned from call. */
    data?: Array<any>;
    /** Error when performing call. */
    error?: unknown;
    isIdle: boolean;
    /** True when performing call. */
    isLoading: boolean;
    isFetching: boolean;
    isSuccess: boolean;
    /** False when performing call. */
    isError: boolean;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    /** True when performing call. */
    isRefetching: boolean;
    /** Manually trigger refresh of data. */
    refetch: () => void;
    status: 'idle' | 'error' | 'loading' | 'success';
}
/**
 * Hook to perform a read-only contract call.
 *
 * @remarks
 *
 * The hook only performs a call if the target `abi`, `address`,
 * `functionName`, and `args` are not undefined.
 *
 * @example
 * This example shows how to fetch the user ERC-20 balance.
 * ```tsx
 * function Component() {
 *   const { address } = useAccount()
 *   const { data, isLoading, error, refetch } = useContractRead({
 *     address: ethAddress,
 *     abi: compiledErc20.abi,
 *     functionName: 'balanceOf',
 *     args: [address],
 *     watch: false
 *   })
 *
 *   if (isLoading) return <span>Loading...</span>
 *   if (error) return <span>Error: {JSON.stringify(error)}</span>
 *
 *   return (
 *     <div>
 *       <button onClick={refetch}>Refetch</button>
 *       <p>U256 high: {data.balance.high.toString()}</p>
 *       <p>U256 low: {data.balance.low.toString()}</p>
 *     </div>
 *   )
 * }
 * ```
 */
export declare function useContractRead<T extends unknown[]>({ abi, address, functionName, args, watch, blockIdentifier, }: UseContractReadArgs<T> & UseContractReadOptions): UseContractReadResult;
