import { uint256 } from 'starknet';
import { UseContractReadOptions, UseContractReadResult } from './call';
/** Arguments for `useBalance`. */
export interface UseBalanceArgs extends UseContractReadOptions {
    /** The contract's address. Defaults to the ETH token. */
    token?: string;
    /** The address to fetch balance for. */
    address?: string;
    /** Decimals to format the balance. Defaults to the token's decimals */
    formatUnits?: number;
}
export interface UseBalanceReadResult extends Omit<UseContractReadResult, 'data'> {
    data?: {
        decimals: number;
        formatted: string;
        symbol: string;
        value: ReturnType<typeof uint256.uint256ToBN>;
    };
}
/**
 * Hook for fetching balance information for ERC-20 tokens.
 *
 * @remarks
 *
 * The hook only performs a call if the target `address` is defined.
 *
 * @example
 * This example shows how to fetch the user Ethereum token balance.
 * ```tsx
 * function Component() {
 *   const { address } = useAccount()
 *   const { data, isLoading, error, refetch } = useBalance({
 *     address
 *   })
 *
 *   if (isLoading) return <span>Loading...</span>
 *   if (error) return <span>Error: {error}</span>
 *
 *   return (
 *     <div>
 *       <button onClick={refetch}>Refetch</button>
 *       <p>Balance: {data.formatted} {data.symbol}</p>
 *     </div>
 *   )
 * }
 * ```
 */
export declare function useBalance({ token, address, formatUnits, watch, blockIdentifier, }: UseBalanceArgs): UseBalanceReadResult;
