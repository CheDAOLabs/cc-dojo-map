"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useContractWrite = void 0;
const react_query_1 = require("@tanstack/react-query");
const account_1 = require("./account");
/**
 * Hook to perform a Starknet multicall.
 *
 * @remarks
 *
 * Multicalls are used to submit multiple transactions in a single
 * call to improve user experience.
 *
 * @example
 * This example shows how to dynamically add transactions to the multicall.
 * ```tsx
 * function Component() {
 *   const { address } = useAccount()
 *   const [count, setCount] = useState(0)
 *
 *   const calls = useMemo(() => {
 *     const tx = {
 *       contractAddress: ethAddress,
 *       entrypoint: 'transfer',
 *       calldata: [address, 1, 0]
 *     }
 *     return Array(count).fill(tx)
 *   }, [address, count])
 *
 *   const { write } = useContractWrite({ calls })
 *
 *   const inc = useCallback(
 *     () => setCount(c => c + 1),
 *     [setCount]
 *   )
 *   const dec = useCallback(
 *     () => setCount(c => Math.max(c - 1, 0)),
 *     [setCount]
 *   )
 *
 *   return (
 *     <>
 *       <p>Sending {count} transactions</p>
 *       <p>
 *         <button onClick={dec}>Decrement</button>
 *         <button onClick={inc}>Increment</button>
 *       </p>
 *       <p>
 *         <button onClick={write}>Write</button>
 *       </p>
 *     </>
 *   )
 * }
 * ```
 */
function useContractWrite({ calls, metadata }) {
    const { account } = (0, account_1.useAccount)();
    const { data, isLoading, error, reset, mutate, mutateAsync, isIdle, isSuccess, status, isError } = (0, react_query_1.useMutation)(writeContract({ account, args: { calls, metadata } }));
    return {
        data,
        error: error ?? undefined,
        reset,
        write: mutate,
        writeAsync: mutateAsync,
        isError,
        isIdle,
        isLoading,
        isSuccess,
        status,
    };
}
exports.useContractWrite = useContractWrite;
function writeContract({ account, args, }) {
    return async () => {
        const { calls, metadata } = args;
        if (account === undefined) {
            throw new Error('No connector connected');
        }
        if (calls === undefined) {
            throw new Error('No calls specified');
        }
        const response = await account.execute(calls);
        console.warn(`TODO: ignoring metadata`, metadata);
        return response;
    };
}
//# sourceMappingURL=execute.js.map