import { GetTransactionResponse } from 'starknet';
/** Arguments for the `useTransaction` hook. */
export interface UseTransactionArgs {
    /** The transaction hash. */
    hash?: string;
    /** Refresh data at every block. */
    watch?: boolean;
}
/** Value returned from `useTransaction`. */
export interface UseTransactionResult {
    /** The transaction data. */
    data?: GetTransactionResponse;
    /** Error while fetching the transaction. */
    error?: unknown;
    /** True if fetching data. */
    isLoading: boolean;
    isIdle: boolean;
    isFetching: boolean;
    isSuccess: boolean;
    isError: boolean;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isRefetching: boolean;
    refetch: () => void;
    status: 'idle' | 'error' | 'loading' | 'success';
}
/**
 * Hook to fetch a single transaction.
 *
 * @remarks
 *
 * This hook keeps a cache of transactions by chain and transaction hash
 * so that you can use the hook freely in your application without worrying
 * about sending duplicate network requests.
 *
 * @example
 * This hook shows how to fetch a transaction.
 * ```tsx
 * function Component() {
 *   const { data, isLoading, error } = useTransaction({
 *     hash: txHash,
 *     watch: true,
 *   })
 *
 *   if (isLoading) return <span>Loading...</span>
 *   if (error) return <span>Error: {JSON.stringify(error)}</span>
 *   return <span>{data.transaction_hash}</span>
 * }
 */
export declare function useTransaction({ hash, watch }: UseTransactionArgs): UseTransactionResult;
/** Arguments for the `useTransactions` hook. */
export interface UseTransactionsArgs {
    /** The transactions hashes. */
    hashes: string[];
    /** Refresh data at every block. */
    watch?: boolean;
}
/**
 * Hook to fetch a list of transactions in parallel.
 *
 * @remarks
 *
 * This hook fetches a dynamic list of transactions without
 * violating the rules of hooks.
 *
 * @example
 * This example shows how to fetch a list of transactions.
 * ```tsx
 * function Component() {
 *   const results = useTransactions({
 *     hashes: [txHash, txHash2],
 *     watch: true,
 *   })
 *
 *   return (
 *     <ul>
 *       {results.map(({ data }, i) => (
 *         <li key={i}>
 *         {data ? data.transaction_hash : 'Loading...'}
 *         </li>
 *       ))}
 *     </ul>
 *   )
 * }
 * ```
 */
export declare function useTransactions({ hashes, watch, }: UseTransactionsArgs): UseTransactionResult[];
