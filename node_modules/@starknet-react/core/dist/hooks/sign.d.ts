import { typedData } from 'starknet';
import type { Signature } from 'starknet';
export interface UseSignTypedDataResult {
    data?: string[];
    error?: string;
    isLoading: boolean;
    isError: boolean;
    signTypedData: () => Promise<Signature | undefined>;
    reset: () => void;
}
/**
 * Hook to sign typed data.
 *
 * @remarks
 *
 * This hook signs a JSON object for off-chain use with the current
 * wallet private key.
 *
 * @example
 * This example shows how to sign some data. The message must follow
 * EIP712 (https://www.starknetjs.com/docs/guides/signature).
 *
 * ```tsx
 * function Component() {
 *   const message = {
 *     types: {
 *      StarkNetDomain: [
 *         { name: "name", type: "felt" },
 *         { name: "version", type: "felt" },
 *         { name: "chainId", type: "felt" },
 *       ],
 *       Person: [
 *         { name: 'name', type: 'felt' }
 *       ],
 *       Mail: [
 *         { name: 'from', type: 'Person' }
 *       ]
 *     },
 *     primaryType: 'Mail',
 *     domain: {
 *       name: 'Starknet Mail',
 *       version: '1',
 *       chainId: 1,
 *     },
 *     message: {
 *       from: {
 *         name: 'Alice'
 *       }
 *     }
 *   }
 *
 *  const { data, signTypedData } = useSignTypedData(message)
 *
 *   return (
 *     <>
 *       <p>
 *         <button onClick={signTypedData}>Sign</button>
 *       </p>
 *       {data && <p>Signed: {JSON.stringify(data)}</p>}
 *     </>
 *   )
 * }
 * ```
 */
export declare function useSignTypedData(typedData: typedData.TypedData): UseSignTypedDataResult;
