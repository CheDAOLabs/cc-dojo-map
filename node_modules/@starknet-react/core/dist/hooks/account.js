"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useAccount = void 0;
const react_1 = require("react");
const connectors_1 = require("./connectors");
const providers_1 = require("../providers");
/**
 * Hook for accessing the account and its connection status.
 *
 * @remarks
 *
 * This hook is used to access the `AccountInterface` object provided by the
 * currently connected wallet.
 *
 * @example
 * This example shows how to display the wallet connection status and
 * the currently connected wallet address.
 * ```tsx
 * function Component() {
 *   const { account, address, status } = useAccount()
 *
 *   if (status === 'disconnected') return <p>Disconnected</p>
 *   return <p>Account: {address}</p>
 * }
 * ```
 */
function useAccount({ onConnect, onDisconnect } = {}) {
    const { account: connectedAccount } = (0, providers_1.useStarknet)();
    const { connectors } = (0, connectors_1.useConnectors)();
    const [state, setState] = (0, react_1.useState)({ status: 'disconnected' });
    const refreshState = (0, react_1.useCallback)(async () => {
        if (!connectedAccount) {
            if (!state.isDisconnected && onDisconnect !== undefined) {
                onDisconnect();
            }
            return setState({
                status: 'disconnected',
                isDisconnected: true,
                isConnected: false,
                isConnecting: false,
                isReconnecting: false,
            });
        }
        for (const connector of connectors) {
            if (!connector.available())
                continue;
            const connAccount = await connector.account();
            if (connAccount && connAccount?.address === connectedAccount) {
                if (state.isDisconnected && onConnect !== undefined) {
                    onConnect({ address: connectedAccount, connector });
                }
                return setState({
                    connector,
                    account: connAccount,
                    address: connectedAccount,
                    status: 'connected',
                    isConnected: true,
                    isConnecting: false,
                    isDisconnected: false,
                    isReconnecting: false,
                });
            }
        }
    }, [setState, connectedAccount, connectors, onConnect, onDisconnect, state.isDisconnected]);
    (0, react_1.useEffect)(() => {
        refreshState();
    }, [refreshState]);
    return state;
}
exports.useAccount = useAccount;
//# sourceMappingURL=account.js.map