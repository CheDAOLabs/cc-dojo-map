"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useConnectors = void 0;
const react_1 = require("react");
const providers_1 = require("../providers");
/**
 * Hook to work with connectors.
 *
 * @remarks
 *
 * This hook is the recommended way to interact with the connectors.
 *
 * Notice that the `available` connectors are computed as soon as the hook is
 * rendered, which could happen _before_ the browser wallets had the opportunity
 * to inject themselves in the page.
 *
 * The best practice is to periodically `refresh` the available connectors.
 *
 * @example
 * This example shows all registered connectors and connects
 * to the specified one.
 * ```tsx
 * function Component() {
 *   const { connect, connectors } = useConnectors()
 *
 *   return (
 *     <ul>
 *       {connectors.map((connector) => (
 *         <li key={connector.id}>
 *           <button onClick={() => connect(connector)}>
 *             Connect {connector.id}
 *           </button>
 *         </li>
 *       ))}
 *     </ul>
 *   )
 * }
 * ```
 *
 * @example
 * This example shows how to refresh the available connectors
 * every 5 seconds.
 * ```tsx
 * function Component() {
 *   const { available, refresh } = useConnectors()
 *
 *   useEffect(() => {
 *     const interval = setInterval(refresh, 5000)
 *     return () => clearInterval(interval)
 *   }, [refresh])
 *
 *   return (
 *     <ul>
 *       {available.map((connector) => (
 *         <li key={connector.id}>
 *           <img
 *             src={connector.icon}
 *             alt={connector.id}
 *             style={{ width: '40px' }}/>
 *         </li>
 *       ))}
 *     </ul>
 *   )
 * }
 * ```
 */
function useConnectors() {
    const { connectors, connect, disconnect } = (0, providers_1.useStarknet)();
    const [available, setAvailable] = (0, react_1.useState)([]);
    const [isLoading, setIsLoading] = (0, react_1.useState)(true);
    (0, react_1.useEffect)(() => {
        setAvailable(connectors.filter((conn) => conn.available()));
        setIsLoading(false);
    }, [connectors, setAvailable]);
    const refresh = (0, react_1.useCallback)(() => {
        setAvailable(connectors.filter((conn) => conn.available()));
        setIsLoading(false);
    }, [connectors, setAvailable, setIsLoading]);
    return { available, connectors, connect, disconnect, refresh, isLoading };
}
exports.useConnectors = useConnectors;
//# sourceMappingURL=connectors.js.map