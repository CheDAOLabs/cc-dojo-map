"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InjectedConnector = void 0;
const base_1 = require("./base");
const errors_1 = require("../errors");
const get_starknet_core_1 = require("get-starknet-core");
class InjectedConnector extends base_1.Connector {
    constructor({ options }) {
        super({ options });
    }
    available() {
        this.ensureWallet();
        return this._wallet !== undefined;
    }
    async ready() {
        await this.ensureWallet();
        if (!this._wallet)
            return false;
        return await this._wallet.isPreauthorized();
    }
    async connect() {
        await this.ensureWallet();
        if (!this._wallet) {
            throw new errors_1.ConnectorNotFoundError();
        }
        try {
            await this._wallet.enable({ starknetVersion: 'v5' });
        }
        catch {
            // NOTE: Argent v3.0.0 swallows the `.enable` call on reject, so this won't get hit.
            throw new errors_1.UserRejectedRequestError();
        }
        if (!this._wallet.isConnected) {
            // NOTE: Argent v3.0.0 swallows the `.enable` call on reject, so this won't get hit.
            throw new errors_1.UserRejectedRequestError();
        }
        // This is to ensure that v5 account interface is used.
        // TODO: add back once Braavos updates their interface.
        /*
        if (!(this._wallet.account instanceof AccountInterface)) {
          throw new UnsupportedAccountInterfaceError()
        }
        */
        return this._wallet.account;
    }
    async disconnect() {
        await this.ensureWallet();
        if (!this.available()) {
            throw new errors_1.ConnectorNotFoundError();
        }
        if (!this._wallet?.isConnected) {
            throw new errors_1.UserNotConnectedError();
        }
    }
    async account() {
        await this.ensureWallet();
        if (!this._wallet) {
            throw new errors_1.ConnectorNotConnectedError();
        }
        if (!this._wallet.account) {
            return null;
        }
        return this._wallet.account;
    }
    get id() {
        return this.options.id;
    }
    get name() {
        this.ensureWallet();
        if (!this._wallet) {
            throw new errors_1.ConnectorNotConnectedError();
        }
        return this._wallet.name;
    }
    get icon() {
        this.ensureWallet();
        if (!this._wallet) {
            throw new errors_1.ConnectorNotConnectedError();
        }
        return this._wallet.icon;
    }
    async initEventListener(accountChangeCb) {
        await this.ensureWallet();
        if (!this._wallet) {
            throw new errors_1.ConnectorNotConnectedError();
        }
        this._wallet.on('accountsChanged', accountChangeCb);
    }
    async removeEventListener(accountChangeCb) {
        await this.ensureWallet();
        if (!this._wallet) {
            throw new errors_1.ConnectorNotConnectedError();
        }
        this._wallet.off('accountsChanged', accountChangeCb);
    }
    async ensureWallet() {
        const starknet = (0, get_starknet_core_1.getStarknet)();
        const installed = await starknet.getAvailableWallets();
        const wallet = installed.filter((w) => w.id === this.options.id)[0];
        if (wallet) {
            this._wallet = wallet;
        }
    }
}
exports.InjectedConnector = InjectedConnector;
//# sourceMappingURL=injected.js.map