import React from 'react';
/** A transaction managed by the transaction manager.
 *
 * @typeParam M - the metadata type.
 */
export interface ManagedTransaction<M extends object> {
    /** The transaction hash. */
    hash: string;
    /** Metadata associated with the transaction. */
    metadata?: M;
}
/** Transaction manager state. */
export interface TransactionManagerState<M extends object> {
    /** The transactions being managed. */
    transactions: ManagedTransaction<M>[];
    /** Hashes of the transactions being managed. */
    hashes: string[];
    /** Add a transaction to the managed transactions. */
    addTransaction: ({ hash, metadata }: {
        hash: string;
        metadata?: M;
    }) => void;
    /** Remove a transaction from the managed transactions. */
    removeTransaction: ({ hash }: {
        hash: string;
    }) => void;
}
/** Transaction manager context. */
export declare const TransactionManagerContext: React.Context<TransactionManagerState<object>>;
/**
 * Hook to manage transaction across different components.
 *
 * @remarks
 *
 * This hook only manages the hashes of the transactions, use the
 * `useTransactions` hook to fetch the state of the transactions.
 *
 * @example
 * This example shows how to fetch the state of tracked transactions
 * and how to add new transactions to the manager.
 *
 * Notice that the transaction manager only accepts the same transaction once.
 * ```tsx
 * function Component() {
 *   const { hashes, addTransaction } = useTransactionManager()
 *   const transactions = useTransactions({ hashes })
 *
 *   return (
 *     <>
 *       <button onClick={() => addTransaction({ hash: txHash, metadata: { test: true } })}>
 *         Add transaction
 *       </button>
 *       <ul>
 *         {transactions.map(({ data }, i) => (
 *           <li key={i}>{data && data.transaction_hash}</li>
 *         ))}
 *       </ul>
 *     </>
 *   )
 * }
 * ```
 */
export declare function useTransactionManager<M extends object>(): TransactionManagerState<M>;
export interface TransactionManagerProviderProps {
    children: React.ReactNode;
}
/** Context provider for `useTransactionManager`. */
export declare function TransactionManagerProvider<M extends object>({ children, }: TransactionManagerProviderProps): import("react/jsx-runtime").JSX.Element;
