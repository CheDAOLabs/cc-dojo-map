{"version":3,"sources":["../../src/node/loadConfig.ts"],"sourcesContent":["import { findUp } from \"find-up\";\nimport path from \"path\";\nimport { NotInsideProjectError } from \"../library/errors\";\nimport esbuild from \"esbuild\";\nimport { rmSync } from \"fs\";\nimport { pathToFileURL } from \"url\";\nimport os from \"os\";\n\n// In order of preference files are checked\nconst configFiles = [\"mud.config.js\", \"mud.config.mjs\", \"mud.config.ts\", \"mud.config.mts\"];\nconst TEMP_CONFIG = \"mud.config.temp.mjs\";\n\nexport async function loadConfig(configPath?: string): Promise<unknown> {\n  configPath = await resolveConfigPath(configPath);\n  try {\n    await esbuild.build({\n      entryPoints: [configPath],\n      format: \"esm\",\n      outfile: TEMP_CONFIG,\n      // https://esbuild.github.io/getting-started/#bundling-for-node\n      platform: \"node\",\n      // bundle local imports (otherwise it may error, js can't import ts)\n      bundle: true,\n      // avoid bundling external imports (it's unnecessary and esbuild can't handle all node features)\n      packages: \"external\",\n    });\n    configPath = await resolveConfigPath(TEMP_CONFIG, true);\n    // Node.js caches dynamic imports, so without appending a cache breaking\n    // param like `?update={Date.now()}` this import always returns the same config\n    // if called multiple times in a single process, like the `dev-contracts` cli\n    return (await import(configPath + `?update=${Date.now()}`)).default;\n  } finally {\n    rmSync(TEMP_CONFIG, { force: true });\n  }\n}\n\nexport async function resolveConfigPath(configPath: string | undefined, toFileURL?: boolean) {\n  if (configPath === undefined) {\n    configPath = await getUserConfigPath();\n  } else {\n    if (!path.isAbsolute(configPath)) {\n      configPath = path.join(process.cwd(), configPath);\n      configPath = path.normalize(configPath);\n    }\n  }\n\n  // Add `file:///` for Windows support\n  // (see https://github.com/nodejs/node/issues/31710)\n  return toFileURL && os.platform() === \"win32\" ? pathToFileURL(configPath).href : configPath;\n}\n\nasync function getUserConfigPath() {\n  const tsConfigPath = await findUp(configFiles);\n  if (tsConfigPath === undefined) {\n    throw new NotInsideProjectError();\n  }\n  return tsConfigPath;\n}\n"],"mappings":"yCAAA,OAAS,UAAAA,MAAc,UACvB,OAAOC,MAAU,OAEjB,OAAOC,MAAa,UACpB,OAAS,UAAAC,MAAc,KACvB,OAAS,iBAAAC,MAAqB,MAC9B,OAAOC,MAAQ,KAGf,IAAMC,EAAc,CAAC,gBAAiB,iBAAkB,gBAAiB,gBAAgB,EACnFC,EAAc,sBAEpB,eAAsBC,EAAWC,EAAuC,CACtEA,EAAa,MAAMC,EAAkBD,CAAU,EAC/C,GAAI,CACF,aAAMP,EAAQ,MAAM,CAClB,YAAa,CAACO,CAAU,EACxB,OAAQ,MACR,QAASF,EAET,SAAU,OAEV,OAAQ,GAER,SAAU,UACZ,CAAC,EACDE,EAAa,MAAMC,EAAkBH,EAAa,EAAI,GAI9C,MAAM,OAAOE,EAAa,WAAW,KAAK,IAAI,MAAM,OAC9D,QAAE,CACAN,EAAOI,EAAa,CAAE,MAAO,EAAK,CAAC,CACrC,CACF,CAEA,eAAsBG,EAAkBD,EAAgCE,EAAqB,CAC3F,OAAIF,IAAe,OACjBA,EAAa,MAAMG,EAAkB,EAEhCC,EAAK,WAAWJ,CAAU,IAC7BA,EAAaI,EAAK,KAAK,QAAQ,IAAI,EAAGJ,CAAU,EAChDA,EAAaI,EAAK,UAAUJ,CAAU,GAMnCE,GAAaN,EAAG,SAAS,IAAM,QAAUD,EAAcK,CAAU,EAAE,KAAOA,CACnF,CAEA,eAAeG,GAAoB,CACjC,IAAME,EAAe,MAAMC,EAAOT,CAAW,EAC7C,GAAIQ,IAAiB,OACnB,MAAM,IAAIE,EAEZ,OAAOF,CACT","names":["findUp","path","esbuild","rmSync","pathToFileURL","os","configFiles","TEMP_CONFIG","loadConfig","configPath","resolveConfigPath","toFileURL","getUserConfigPath","path","tsConfigPath","findUp","NotInsideProjectError"]}