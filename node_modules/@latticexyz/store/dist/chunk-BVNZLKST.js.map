{"version":3,"sources":["../ts/register/index.ts","../ts/register/configExtensions.ts","../ts/register/mudConfig.ts"],"sourcesContent":["// Importing this file has side-effects for MUD config,\n// and the order of imports is important in relation to other plugins\n// (store should usually be the first plugin)\n\n// For convenience register and reexport config, to reduce the number of needed imports for users\nimport \"@latticexyz/config/register\";\nexport { mudCoreConfig, resolveTableId } from \"@latticexyz/config/register\";\n// Extend core config and types\nimport \"./configExtensions\";\nimport \"./typeExtensions\";\n\nexport { mudConfig } from \"./mudConfig\";\nexport type { ExpandMUDUserConfig } from \"./typeExtensions\";\n","import { extendMUDCoreConfig, fromZodErrorCustom } from \"@latticexyz/config\";\nimport { ZodError } from \"zod\";\nimport { zPluginStoreConfig } from \"../config\";\n\nextendMUDCoreConfig((config) => {\n  // This function gets called within mudConfig.\n  // The call order of config extenders depends on the order of their imports.\n  // Any config validation and transformation should be placed here.\n  try {\n    return zPluginStoreConfig.parse(config);\n  } catch (error) {\n    if (error instanceof ZodError) {\n      throw fromZodErrorCustom(error, \"StoreConfig Validation Error\");\n    } else {\n      throw error;\n    }\n  }\n});\n","import { mudCoreConfig, MUDCoreUserConfig } from \"@latticexyz/config\";\nimport { ExtractUserTypes, StringForUnion } from \"@latticexyz/common/type-utils\";\nimport { MUDUserConfig } from \"..\";\nimport { ExpandMUDUserConfig } from \"./typeExtensions\";\n\n/** mudCoreConfig wrapper to use generics in some options for better type inference */\nexport function mudConfig<\n  T extends MUDCoreUserConfig,\n  // (`never` is overridden by inference, so only the defined enums can be used by default)\n  EnumNames extends StringForUnion = never,\n  UserTypeNames extends StringForUnion = never,\n  StaticUserTypes extends ExtractUserTypes<EnumNames | UserTypeNames> = ExtractUserTypes<EnumNames | UserTypeNames>\n>(config: MUDUserConfig<T, EnumNames, UserTypeNames, StaticUserTypes>): ExpandMUDUserConfig<T> {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return mudCoreConfig(config) as any;\n}\n"],"mappings":"wCAKA,MAAO,8BACP,OAAS,iBAAAA,EAAe,kBAAAC,MAAsB,8BCN9C,OAAS,uBAAAC,EAAqB,sBAAAC,MAA0B,qBACxD,OAAS,YAAAC,MAAgB,MAGzBC,EAAqBC,GAAW,CAI9B,GAAI,CACF,OAAOC,EAAmB,MAAMD,CAAM,CACxC,OAASE,EAAP,CACA,MAAIA,aAAiBC,EACbC,EAAmBF,EAAO,8BAA8B,EAExDA,CAEV,CACF,CAAC,ECjBD,OAAS,iBAAAG,MAAwC,qBAM1C,SAASC,EAMdC,EAA6F,CAE7F,OAAOF,EAAcE,CAAM,CAC7B","names":["mudCoreConfig","resolveTableId","extendMUDCoreConfig","fromZodErrorCustom","ZodError","extendMUDCoreConfig","config","zPluginStoreConfig","error","ZodError","fromZodErrorCustom","mudCoreConfig","mudConfig","config"]}