import type { Address } from 'abitype';
import type { Account } from '../../accounts/types.js';
import type { SendTransactionParameters } from '../../actions/wallet/sendTransaction.js';
import type { Client } from '../../clients/createClient.js';
import type { Transport } from '../../clients/transports/createTransport.js';
import type { GetAccountParameter } from '../../types/account.js';
import type { Chain, GetChain } from '../../types/chain.js';
import type { UnionOmit } from '../../types/utils.js';
import type { FormattedTransactionRequest } from '../index.js';
export type PrepareRequestParameters<TChain extends Chain | undefined = Chain | undefined, TAccount extends Account | undefined = Account | undefined, TChainOverride extends Chain | undefined = Chain | undefined> = UnionOmit<FormattedTransactionRequest<TChainOverride extends Chain ? TChainOverride : TChain>, 'from'> & GetAccountParameter<TAccount> & GetChain<TChain, TChainOverride>;
export type PrepareRequestReturnType<TChain extends Chain | undefined = Chain | undefined, TAccount extends Account | undefined = Account | undefined, TChainOverride extends Chain | undefined = Chain | undefined, TArgs extends PrepareRequestParameters<TChain, TAccount, TChainOverride> = PrepareRequestParameters<TChain, TAccount, TChainOverride>> = TArgs & {
    from: Address;
    gas: SendTransactionParameters['gas'];
    gasPrice?: SendTransactionParameters['gasPrice'];
    maxFeePerGas?: SendTransactionParameters['maxFeePerGas'];
    maxPriorityFeePerGas?: SendTransactionParameters['maxPriorityFeePerGas'];
    nonce: SendTransactionParameters['nonce'];
};
export declare function prepareRequest<TChain extends Chain | undefined, TAccount extends Account | undefined, TChainOverride extends Chain | undefined, TArgs extends PrepareRequestParameters<TChain, TAccount, TChainOverride>>(client: Client<Transport, TChain, TAccount>, args: TArgs): Promise<PrepareRequestReturnType<TChain, TAccount, TChainOverride, TArgs>>;
//# sourceMappingURL=prepareRequest.d.ts.map