import{execa as s}from"execa";import a from"chalk";async function n(r){let{stdout:t}=await s("forge",["config","--json"],{stdio:["inherit","pipe","pipe"],env:{FOUNDRY_PROFILE:r}});return JSON.parse(t)}async function m(r){return(await n(r)).src}async function l(r){return(await n(r)).script}async function y(r){return(await n(r)).test}async function x(r){return(await n(r)).out}async function P(r){return(await n(r)).eth_rpc_url||"http://127.0.0.1:8545"}async function w(r){return(await n(r)).remappings.map(t=>t.trim().split("="))}async function O(r,t){let i={env:{FOUNDRY_PROFILE:t?.profile},stdout:"inherit",stderr:"pipe"};await(t?.silent?s("forge",r,i):o("forge",r,i))}async function d(r,t){return o("cast",r,{env:{FOUNDRY_PROFILE:t?.profile}})}async function F(r){return o("anvil",r)}async function o(r,t,i){let g=`${r} ${t.join(" ")}`;try{console.log(a.gray(`running "${g}"`));let{stdout:e}=await s(r,t,{stdout:"pipe",stderr:"pipe",...i});return e}catch(e){let c=e?.stderr||e?.message||"";throw c+=a.red(`
Error running "${g}"`),new Error(c)}}export{F as anvil,d as cast,O as forge,n as getForgeConfig,x as getOutDirectory,w as getRemappings,P as getRpcUrl,l as getScriptDirectory,m as getSrcDirectory,y as getTestDirectory};
//# sourceMappingURL=foundry.js.map