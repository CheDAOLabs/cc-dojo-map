{"version":3,"sources":["../src/deprecated/TableId.ts","../src/deprecated/getTableIds.ts"],"sourcesContent":["import { Hex, stringToHex, hexToString, sliceHex, concatHex } from \"viem\";\n\n/** @deprecated Use `tableIdToHex` and `hexToTableId` instead. */\nexport class TableId {\n  readonly namespace: string;\n  readonly name: string;\n\n  constructor(namespace: string, name: string) {\n    this.namespace = namespace.substring(0, 16);\n    this.name = name.substring(0, 16);\n  }\n\n  toString(): string {\n    return `TableId<${this.namespace || \"[empty]\"}:${this.name || \"[empty]\"}>`;\n  }\n\n  toHex(): Hex {\n    return TableId.toHex(this.namespace, this.name);\n  }\n\n  static toHex(namespace: string, name: string): Hex {\n    return concatHex([\n      stringToHex(namespace.substring(0, 16), { size: 16 }),\n      stringToHex(name.substring(0, 16), { size: 16 }),\n    ]);\n  }\n\n  static fromHex(hex: Hex): TableId {\n    const namespace = hexToString(sliceHex(hex, 0, 16)).replace(/\\0+$/, \"\");\n    const name = hexToString(sliceHex(hex, 16, 32)).replace(/\\0+$/, \"\");\n    return new TableId(namespace, name);\n  }\n\n  /** @deprecated Don't use this! This is a temporary hack for v2<>v1 compatibility until we can write v2 client libraries. This is here so it stays close to the formatting of `toString()` above. */\n  static parse(tableIdString: string): TableId | null {\n    const match = tableIdString.match(/^TableId<(.+?):(.+?)>$/);\n    if (!match) return null;\n    const [, namespace, name] = match;\n    return new TableId(namespace === \"[empty]\" ? \"\" : namespace, name === \"[empty]\" ? \"\" : name);\n  }\n}\n","import { TableId } from \"./TableId\";\n\n/** @deprecated Use `tableIdToHex` and `hexToTableId` instead. */\nexport function getTableIds(config: { namespace: string; tables: { [key: string]: unknown } }): TableId[] {\n  return Object.keys(config.tables).map((table) => new TableId(config.namespace, table));\n}\n"],"mappings":"AAAA,OAAc,eAAAA,EAAa,eAAAC,EAAa,YAAAC,EAAU,aAAAC,MAAiB,OAG5D,IAAMC,EAAN,KAAc,CACV,UACA,KAET,YAAYC,EAAmBC,EAAc,CAC3C,KAAK,UAAYD,EAAU,UAAU,EAAG,EAAE,EAC1C,KAAK,KAAOC,EAAK,UAAU,EAAG,EAAE,CAClC,CAEA,UAAmB,CACjB,MAAO,WAAW,KAAK,WAAa,aAAa,KAAK,MAAQ,YAChE,CAEA,OAAa,CACX,OAAOF,EAAQ,MAAM,KAAK,UAAW,KAAK,IAAI,CAChD,CAEA,OAAO,MAAMC,EAAmBC,EAAmB,CACjD,OAAOH,EAAU,CACfH,EAAYK,EAAU,UAAU,EAAG,EAAE,EAAG,CAAE,KAAM,EAAG,CAAC,EACpDL,EAAYM,EAAK,UAAU,EAAG,EAAE,EAAG,CAAE,KAAM,EAAG,CAAC,CACjD,CAAC,CACH,CAEA,OAAO,QAAQC,EAAmB,CAChC,IAAMF,EAAYJ,EAAYC,EAASK,EAAK,EAAG,EAAE,CAAC,EAAE,QAAQ,OAAQ,EAAE,EAChED,EAAOL,EAAYC,EAASK,EAAK,GAAI,EAAE,CAAC,EAAE,QAAQ,OAAQ,EAAE,EAClE,OAAO,IAAIH,EAAQC,EAAWC,CAAI,CACpC,CAGA,OAAO,MAAME,EAAuC,CAClD,IAAMC,EAAQD,EAAc,MAAM,wBAAwB,EAC1D,GAAI,CAACC,EAAO,OAAO,KACnB,GAAM,CAAC,CAAEJ,EAAWC,CAAI,EAAIG,EAC5B,OAAO,IAAIL,EAAQC,IAAc,UAAY,GAAKA,EAAWC,IAAS,UAAY,GAAKA,CAAI,CAC7F,CACF,ECrCO,SAASI,EAAYC,EAA8E,CACxG,OAAO,OAAO,KAAKA,EAAO,MAAM,EAAE,IAAKC,GAAU,IAAIC,EAAQF,EAAO,UAAWC,CAAK,CAAC,CACvF","names":["stringToHex","hexToString","sliceHex","concatHex","TableId","namespace","name","hex","tableIdString","match","getTableIds","config","table","TableId"]}