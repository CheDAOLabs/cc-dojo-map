{"version":3,"sources":["../src/foundry/index.ts"],"sourcesContent":["import { execa, Options } from \"execa\";\nimport chalk from \"chalk\";\n\nexport interface ForgeConfig {\n  // project\n  src: string;\n  test: string;\n  script: string;\n  out: string;\n  libs: string[];\n  eth_rpc_url: string | null;\n\n  // compiler\n  remappings: string[];\n\n  // all unspecified keys (this interface is far from comprehensive)\n  [key: string]: unknown;\n}\n\n/**\n * Get forge config as a parsed json object.\n */\nexport async function getForgeConfig(profile?: string): Promise<ForgeConfig> {\n  const { stdout } = await execa(\"forge\", [\"config\", \"--json\"], {\n    stdio: [\"inherit\", \"pipe\", \"pipe\"],\n    env: { FOUNDRY_PROFILE: profile },\n  });\n\n  return JSON.parse(stdout) as ForgeConfig;\n}\n\n/**\n * Get the value of \"src\" from forge config.\n * The path to the contract sources relative to the root of the project.\n */\nexport async function getSrcDirectory(profile?: string): Promise<string> {\n  return (await getForgeConfig(profile)).src;\n}\n\n/**\n * Get the value of \"script\" from forge config.\n * The path to the contract sources relative to the root of the project.\n */\nexport async function getScriptDirectory(profile?: string): Promise<string> {\n  return (await getForgeConfig(profile)).script;\n}\n\n/**\n * Get the value of \"test\" from forge config.\n * The path to the test contract sources relative to the root of the project.\n */\nexport async function getTestDirectory(profile?: string): Promise<string> {\n  return (await getForgeConfig(profile)).test;\n}\n\n/**\n * Get the value of \"out\" from forge config.\n * The path to put contract artifacts in, relative to the root of the project.\n */\nexport async function getOutDirectory(profile?: string): Promise<string> {\n  return (await getForgeConfig(profile)).out;\n}\n\n/**\n * Get the value of \"eth_rpc_url\" from forge config, default to \"http://127.0.0.1:8545\"\n * @param profile The foundry profile to use\n * @returns The rpc url\n */\nexport async function getRpcUrl(profile?: string): Promise<string> {\n  return (await getForgeConfig(profile)).eth_rpc_url || \"http://127.0.0.1:8545\";\n}\n\n/**\n * Get the value of \"remappings\" from forge config\n * @param profile The foundry profile to use\n * @returns The array of remapping tuples `[from, to]`\n */\nexport async function getRemappings(profile?: string): Promise<[string, string][]> {\n  return (await getForgeConfig(profile)).remappings.map((line) => line.trim().split(\"=\")) as [string, string][];\n}\n\n/**\n * Execute a forge command\n * @param args The arguments to pass to forge\n * @param options { profile?: The foundry profile to use; silent?: If true, nothing will be logged to the console }\n */\nexport async function forge(args: string[], options?: { profile?: string; silent?: boolean }): Promise<void> {\n  const execOptions: Options<string> = {\n    env: { FOUNDRY_PROFILE: options?.profile },\n    stdout: \"inherit\",\n    stderr: \"pipe\",\n  };\n\n  await (options?.silent ? execa(\"forge\", args, execOptions) : execLog(\"forge\", args, execOptions));\n}\n\n/**\n * Execute a cast command\n * @param args The arguments to pass to cast\n * @returns Stdout of the command\n */\nexport async function cast(args: string[], options?: { profile?: string }): Promise<string> {\n  return execLog(\"cast\", args, {\n    env: { FOUNDRY_PROFILE: options?.profile },\n  });\n}\n\n/**\n * Start an anvil chain\n * @param args The arguments to pass to anvil\n * @returns Stdout of the command\n */\nexport async function anvil(args: string[]): Promise<string> {\n  return execLog(\"anvil\", args);\n}\n\n/**\n * Executes the given command, returns the stdout, and logs the command to the console.\n * Throws an error if the command fails.\n * @param command The command to execute\n * @param args The arguments to pass to the command\n * @returns The stdout of the command\n */\nasync function execLog(command: string, args: string[], options?: Options<string>): Promise<string> {\n  const commandString = `${command} ${args.join(\" \")}`;\n  try {\n    console.log(chalk.gray(`running \"${commandString}\"`));\n    const { stdout } = await execa(command, args, { stdout: \"pipe\", stderr: \"pipe\", ...options });\n    return stdout;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  } catch (error: any) {\n    let errorMessage = error?.stderr || error?.message || \"\";\n    errorMessage += chalk.red(`\\nError running \"${commandString}\"`);\n    throw new Error(errorMessage);\n  }\n}\n"],"mappings":"AAAA,OAAS,SAAAA,MAAsB,QAC/B,OAAOC,MAAW,QAqBlB,eAAsBC,EAAeC,EAAwC,CAC3E,GAAM,CAAE,OAAAC,CAAO,EAAI,MAAMJ,EAAM,QAAS,CAAC,SAAU,QAAQ,EAAG,CAC5D,MAAO,CAAC,UAAW,OAAQ,MAAM,EACjC,IAAK,CAAE,gBAAiBG,CAAQ,CAClC,CAAC,EAED,OAAO,KAAK,MAAMC,CAAM,CAC1B,CAMA,eAAsBC,EAAgBF,EAAmC,CACvE,OAAQ,MAAMD,EAAeC,CAAO,GAAG,GACzC,CAMA,eAAsBG,EAAmBH,EAAmC,CAC1E,OAAQ,MAAMD,EAAeC,CAAO,GAAG,MACzC,CAMA,eAAsBI,EAAiBJ,EAAmC,CACxE,OAAQ,MAAMD,EAAeC,CAAO,GAAG,IACzC,CAMA,eAAsBK,EAAgBL,EAAmC,CACvE,OAAQ,MAAMD,EAAeC,CAAO,GAAG,GACzC,CAOA,eAAsBM,EAAUN,EAAmC,CACjE,OAAQ,MAAMD,EAAeC,CAAO,GAAG,aAAe,uBACxD,CAOA,eAAsBO,EAAcP,EAA+C,CACjF,OAAQ,MAAMD,EAAeC,CAAO,GAAG,WAAW,IAAKQ,GAASA,EAAK,KAAK,EAAE,MAAM,GAAG,CAAC,CACxF,CAOA,eAAsBC,EAAMC,EAAgBC,EAAiE,CAC3G,IAAMC,EAA+B,CACnC,IAAK,CAAE,gBAAiBD,GAAS,OAAQ,EACzC,OAAQ,UACR,OAAQ,MACV,EAEA,MAAOA,GAAS,OAASd,EAAM,QAASa,EAAME,CAAW,EAAIC,EAAQ,QAASH,EAAME,CAAW,EACjG,CAOA,eAAsBE,EAAKJ,EAAgBC,EAAiD,CAC1F,OAAOE,EAAQ,OAAQH,EAAM,CAC3B,IAAK,CAAE,gBAAiBC,GAAS,OAAQ,CAC3C,CAAC,CACH,CAOA,eAAsBI,EAAML,EAAiC,CAC3D,OAAOG,EAAQ,QAASH,CAAI,CAC9B,CASA,eAAeG,EAAQG,EAAiBN,EAAgBC,EAA4C,CAClG,IAAMM,EAAgB,GAAGD,KAAWN,EAAK,KAAK,GAAG,IACjD,GAAI,CACF,QAAQ,IAAIZ,EAAM,KAAK,YAAYmB,IAAgB,CAAC,EACpD,GAAM,CAAE,OAAAhB,CAAO,EAAI,MAAMJ,EAAMmB,EAASN,EAAM,CAAE,OAAQ,OAAQ,OAAQ,OAAQ,GAAGC,CAAQ,CAAC,EAC5F,OAAOV,CAET,OAASiB,EAAP,CACA,IAAIC,EAAeD,GAAO,QAAUA,GAAO,SAAW,GACtD,MAAAC,GAAgBrB,EAAM,IAAI;AAAA,iBAAoBmB,IAAgB,EACxD,IAAI,MAAME,CAAY,CAC9B,CACF","names":["execa","chalk","getForgeConfig","profile","stdout","getSrcDirectory","getScriptDirectory","getTestDirectory","getOutDirectory","getRpcUrl","getRemappings","line","forge","args","options","execOptions","execLog","cast","anvil","command","commandString","error","errorMessage"]}