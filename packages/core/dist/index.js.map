{"version":3,"sources":["../src/provider/RPCProvider.ts","../src/provider/provider.ts","../src/types/index.ts","../src/constants/index.ts","../src/utils/index.ts"],"sourcesContent":["import {\n    RpcProvider,\n    Account,\n    InvokeFunctionResponse,\n    Contract,\n    shortString,\n    InvocationsDetails,\n    AllowArray,\n    Call,\n    num,\n    CallContractResponse,\n} from \"starknet\";\nimport { Provider } from \"./provider\";\nimport { Query, WorldEntryPoints } from \"../types\";\nimport { LOCAL_KATANA } from \"../constants\";\nimport { getContractByName } from \"../utils\";\n\n/**\n * RPCProvider class: Extends the generic Provider to handle RPC interactions.\n */\nexport class RPCProvider extends Provider {\n    public provider: RpcProvider;\n    public contract: Contract;\n    public manifest: any;\n\n    /**\n     * Constructor: Initializes the RPCProvider with the given world address and URL.\n     *\n     * @param {string} world_address - Address of the world.\n     * @param {string} [url=LOCAL_KATANA] - RPC URL (defaults to LOCAL_KATANA).\n     */\n    constructor(\n        world_address: string,\n        manifest?: any,\n        url: string = LOCAL_KATANA\n    ) {\n        super(world_address);\n        this.provider = new RpcProvider({\n            nodeUrl: url,\n        });\n\n        this.contract = new Contract(\n            manifest.world.abi,\n            this.getWorldAddress(),\n            this.provider\n        );\n        this.manifest = manifest;\n    }\n\n    /**\n     * Retrieves a single entity's details.\n     *\n     * @param {string} model - The component to query.\n     * @param {Query} query - The query details.\n     * @param {number} [offset=0] - Starting offset (defaults to 0).\n     * @param {number} [length=0] - Length to retrieve (defaults to 0).\n     * @returns {Promise<Array<bigint>>} - A promise that resolves to an array of bigints representing the entity's details.\n     */\n    public async entity(\n        model: string,\n        query: Query,\n        offset: number = 0,\n        length: number = 0\n    ): Promise<Array<bigint>> {\n        try {\n            return (await this.contract.call(WorldEntryPoints.get, [\n                shortString.encodeShortString(model),\n                query.keys.length,\n                ...(query.keys as any),\n                offset,\n                length,\n            ])) as unknown as Array<bigint>;\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    /**\n     * Retrieves multiple entities' details.\n     *\n     * @param {string} component - The component to query.\n     * @param {number} length - Number of entities to retrieve.\n     * @returns {Promise<Array<bigint>>} - A promise that resolves to an array of bigints representing the entities' details.\n     */\n    public async entities(\n        model: string,\n        length: number\n    ): Promise<Array<bigint>> {\n        try {\n            return (await this.contract.call(WorldEntryPoints.entities, [\n                shortString.encodeShortString(model),\n                length,\n            ])) as unknown as Array<bigint>;\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    /**\n     * Retrieves a component's details.\n     *\n     * @param {string} name - Name of the component.\n     * @returns {Promise<bigint>} - A promise that resolves to a bigint representing the component's details.\n     */\n    public async component(name: string): Promise<bigint> {\n        try {\n            return (await this.contract.call(WorldEntryPoints.component, [\n                shortString.encodeShortString(name),\n            ])) as unknown as bigint;\n        } catch (error) {\n            throw error;\n        }\n    }\n    /**\n     * Executes a function with the given parameters.\n     *\n     * @param {Account} account - The account to use.\n     * @param {string} contract - The contract to execute.\n     * @param {string} call - The function to call.\n     * @param {num.BigNumberish[]} call_data - The call data for the function.\n     * @param {InvocationsDetails | undefined} transactionDetails - The transactionDetails allow to override maxFee & version\n     * @returns {Promise<InvokeFunctionResponse>} - A promise that resolves to the response of the function execution.\n     */\n    public async execute(\n        account: Account,\n        contract_name: string,\n        call: string,\n        calldata: num.BigNumberish[],\n        transactionDetails?: InvocationsDetails | undefined\n    ): Promise<InvokeFunctionResponse> {\n        try {\n            const nonce = await account?.getNonce();\n\n            return await account?.execute(\n                {\n                    contractAddress: getContractByName(\n                        this.manifest,\n                        contract_name\n                    ),\n                    entrypoint: call,\n                    calldata: calldata,\n                },\n                undefined,\n                {\n                    maxFee: 0, // TODO: Update this value as needed.\n                    ...transactionDetails,\n                    nonce,\n                }\n            );\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    /**\n     * Executes a function with the given parameters.\n     *\n     * @param {Account} account - The account to use.\n     * @param {AllowArray<Call>} calls - The calls to execute.\n     * @param {InvocationsDetails | undefined} transactionDetails - The transactionDetails allow to override maxFee & version\n     * @returns {Promise<InvokeFunctionResponse>} - A promise that resolves to the response of the function execution.\n     */\n    public async executeMulti(\n        account: Account,\n        calls: AllowArray<Call>,\n        transactionDetails?: InvocationsDetails | undefined\n    ): Promise<InvokeFunctionResponse> {\n        try {\n            const nonce = await account?.getNonce();\n\n            return await account?.execute(calls, undefined, {\n                maxFee: 0, // TODO: Update this value as needed.\n                ...transactionDetails,\n                nonce,\n            });\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    /**\n     * Retrieves current uuid from the world contract\n     *\n     * @returns {Promise<number>} - A promise that resolves to the world uuid\n     * @throws {Error} - Throws an error if the call fails.\n     *\n     * @example\n     * const uuid = await provider.uuid();\n     * console.log(uuid);\n     * // => 6\n     *\n     */\n    public async uuid(): Promise<number> {\n        try {\n            const { result } = await this.provider.callContract({\n                contractAddress: this.getWorldAddress(),\n                entrypoint: \"uuid\",\n                calldata: [],\n            });\n            if (result && result.length === 1) {\n                return parseInt(result[0]);\n            }\n            throw new Error(\"Contract did not return expected uuid\");\n        } catch (error) {\n            throw new Error(`Failed to fetch uuid: ${error}`);\n        }\n    }\n    /**\n     * Calls a function with the given parameters.\n     *\n     * @param {string} contract - The contract to call.\n     * @param {string} call - The function to call.\n     * @returns {Promise<CallContractResponse>} - A promise that resolves to the response of the function call.\n     */\n    public async call(\n        contract_name: string,\n        call: string,\n        calldata?: num.BigNumberish[]\n    ): Promise<CallContractResponse> {\n        try {\n            return await this.provider.callContract({\n                contractAddress: getContractByName(\n                    this.manifest,\n                    contract_name\n                ),\n                entrypoint: call,\n                calldata,\n            });\n        } catch (error) {\n            throw new Error(`Failed to call: ${error}`);\n        }\n    }\n}\n","import { ICommands, Query } from \"../types\";\n\n/**\n * Provider class: An abstract base class for all providers.\n * It implements the ICommands interface, ensuring that any class deriving from Provider\n * will have implementations for the entity and entities methods.\n */\nexport abstract class Provider implements ICommands {\n    // Store the address of the world.\n    private readonly worldAddress: string;\n\n    /**\n     * Constructor: Initializes the Provider with a given world address.\n     *\n     * @param {string} worldAddress - The address of the world.\n     */\n    constructor(worldAddress: string) {\n        this.worldAddress = worldAddress;\n    }\n\n    /**\n     * Abstract method to retrieve a single entity's details.\n     * Classes extending Provider should provide a concrete implementation for this method.\n     *\n     * @param {string} component - The component to query.\n     * @param {Query} query - The query details.\n     * @param {number} offset - Starting offset.\n     * @param {number} length - Length to retrieve.\n     * @returns {Promise<Array<bigint>>} - A promise that resolves to an array of bigints representing the entity's details.\n     */\n    public abstract entity(\n        component: string,\n        query: Query,\n        offset: number,\n        length: number\n    ): Promise<Array<bigint>>;\n\n    /**\n     * Abstract method to retrieve multiple entities' details.\n     * Classes extending Provider should provide a concrete implementation for this method.\n     *\n     * @param {string} component - The component to query.\n     * @param {number} length - Number of entities to retrieve.\n     * @returns {Promise<Array<bigint>>} - A promise that resolves to an array of bigints representing the entities' details.\n     */\n    public abstract entities(\n        component: string,\n        length: number\n    ): Promise<Array<bigint>>;\n\n    /**\n     * Retrieves the stored world address.\n     *\n     * @returns {string} - The address of the world.\n     */\n    public getWorldAddress(): string {\n        return this.worldAddress;\n    }\n}\n","import { num } from \"starknet\";\n\n/**\n * Enumeration representing various entry points or functions available in the World.\n */\nexport enum WorldEntryPoints {\n    get = \"entity\", // Retrieve a single entity\n    set = \"set_entity\", // Set or update a single entity\n    entities = \"entities\", // Retrieve multiple entities\n    execute = \"execute\", // Execute a specific command\n    register_system = \"register_system\", // Register a new system\n    register_component = \"register_component\", // Register a new component\n    component = \"component\", // Access a component\n    system = \"system\", // Access a system\n}\n\n/**\n * Interface representing a query structure with domain and keys.\n */\nexport interface Query {\n    keys: num.BigNumberish[]; // A list of keys used in the query\n}\n\n/**\n * ICommands interface provides a set of optional command methods that can be implemented\n * by classes to interact with the World system.\n */\nexport interface ICommands {\n    // Retrieve details of a single entity\n    entity?(\n        component: string,\n        query: Query,\n        offset: number,\n        length: number\n    ): Promise<Array<bigint>>;\n\n    // Retrieve details of multiple entities\n    entities?(component: string, length: number): Promise<Array<bigint>>;\n\n    // Execute a specific command\n    execute?(\n        name: bigint,\n        execute_calldata: Array<bigint>\n    ): Promise<Array<bigint>>;\n\n    // Register a new component and return its ID\n    register_component?(class_hash: string): Promise<bigint>;\n\n    // Register a new system and return its ID\n    register_system?(class_hash: string): Promise<bigint>;\n\n    // Check if a system is authorized to access a component\n    is_authorized?(system: string, component: string): Promise<bigint>;\n\n    // Check if the current user/account is an admin\n    is_account_admin?(): Promise<bigint>;\n\n    // Access a specific component and return its details\n    component?(name: string): Promise<bigint>;\n\n    // Access a specific system and return its details\n    system?(name: string): Promise<bigint>;\n\n    // Get the current block time\n    blocktime?(): Promise<bigint>;\n\n    // Get the age or duration since the World was created\n    worldAge?(): Promise<bigint>;\n}\n","export const KATANA_ACCOUNT_1_ADDRESS =\n    \"0x517ececd29116499f4a1b64b094da79ba08dfd54a3edaa316134c41f8160973\";\nexport const KATANA_ACCOUNT_1_PRIVATEKEY =\n    \"0x1800000000300000180000000000030000000000003006001800006600\";\nexport const LOCAL_KATANA = \"http://127.0.0.1:5050\";\nexport const LOCAL_TORII = \"http://localhost:8080\";\nexport const DOJO_STARTER_WORLD =\n    \"0x26065106fa319c3981618e7567480a50132f23932226a51c219ffb8e47daa84\";\nexport const ACCOUNT_CLASS_HASH =\n    \"0x04d07e40e93398ed3c76981e72dd1fd22557a78ce36c0515f679e27f0bb5bc5f\";\n","import { shortString } from \"starknet\";\n\n/**\n * Extracts the names of all components from a manifest.\n *\n * @param {any} manifest - The input manifest containing component details.\n * @returns {any} - An array containing the names of all components.\n */\nexport function getAllComponentNames(manifest: any): any {\n    return manifest.components.map((component: any) => component.name);\n}\n\n/**\n * Extracts the names of all components from a manifest and converts them to `felt252` representation.\n *\n * @param {any} manifest - The input manifest containing component details.\n * @returns {any} - An array containing the `felt252` representation of component names.\n */\nexport function getAllComponentNamesAsFelt(manifest: any): any {\n    return manifest.components.map((component: any) =>\n        shortString.encodeShortString(component.name)\n    );\n}\n\n/**\n * Extracts the names of all systems from a manifest.\n *\n * @param {any} manifest - The input manifest containing system details.\n * @returns {any} - An array containing the names of all systems.\n */\nexport function getAllSystemNames(manifest: any): any {\n    return manifest.systems.map((system: any) => system.name);\n}\n\n/**\n * Extracts the names of all systems from a manifest and converts them to `felt252` representation.\n *\n * @param {any} manifest - The input manifest containing system details.\n * @returns {any} - An array containing the `felt252` representation of system names.\n */\nexport function getAllSystemNamesAsFelt(manifest: any): any {\n    return manifest.systems.map((system: any) =>\n        shortString.encodeShortString(system.name)\n    );\n}\n\n/**\n * Gets a contract from a manifest by name.\n *\n * @param {any} manifest - The manifest object.\n * @param {string} name - The name of the contract.\n * @returns {any} The contract object.\n *\n */\nexport const getContractByName = (manifest: any, name: string) => {\n    return (\n        manifest.contracts.find((contract: any) => contract.name === name)\n            ?.address || \"\"\n    );\n};\n"],"mappings":"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","names":["RpcProvider","Contract","shortString","Provider","worldAddress","WorldEntryPoints","LOCAL_KATANA","shortString","getAllComponentNames","manifest","component","getAllComponentNamesAsFelt","getAllSystemNames","system","getAllSystemNamesAsFelt","getContractByName","name","contract","RPCProvider","Provider","world_address","manifest","url","LOCAL_KATANA","RpcProvider","Contract","model","query","offset","length","shortString","error","name","account","contract_name","call","calldata","transactionDetails","nonce","getContractByName","calls","result"]}